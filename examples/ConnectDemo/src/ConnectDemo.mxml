<?xml version = "1.0" encoding = "utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				applicationComplete="init()" currentState="Loading">
	<mx:Script>
		<![CDATA[
			import com.facebook.Facebook;
			import com.facebook.commands.friends.GetFriends;
			import com.facebook.commands.graph.core.GetLoginStatus;
			import com.facebook.commands.graph.core.Login;
			import com.facebook.commands.graph.core.Logout;
			import com.facebook.commands.graph.ui.StreamPublish;
			import com.facebook.commands.users.GetInfo;
			import com.facebook.data.friends.GetFriendsData;
			import com.facebook.data.graph.core.GetLoginStatusData;
			import com.facebook.data.graph.core.LoginData;
			import com.facebook.data.graph.core.LogoutData;
			import com.facebook.data.graph.core.SessionResponseData;
			import com.facebook.data.graph.core.StatusType;
			import com.facebook.data.users.GetInfoData;
			import com.facebook.data.users.GetInfoFieldValues;
			import com.facebook.events.FacebookEvent;
			import com.facebook.facebook_internal;
			import com.facebook.net.FacebookCall;
			import com.facebook.session.JSSession;
			
			import mx.controls.Alert;
			
			use namespace facebook_internal;
			
			protected const RSS_URL:String = 'http://blogs.adobe.com/index.xml';
			
			protected var facebook:Facebook;
			protected var sessionResponseData:SessionResponseData;
			protected var loader:URLLoader;
			
			protected function init():void
			{
				var session:JSSession = new JSSession( null, ExternalInterface.objectID );
				
				facebook = new Facebook();
				facebook.startSession( session );
				
				getLoginStatus();
				
				/*
				//Add Events that come from each renderer. 
				rssList.addEventListener( 'post', postToFacebook );
				rssList.addEventListener( 'share', shareLink );
				
				var permsDP:Array = [ ExtendedPermissionValues.PUBLISH_STREAM,
									  ExtendedPermissionValues.CREATE_EVENT, ExtendedPermissionValues.USER_NOTES, ExtendedPermissionValues.EMAIL,
									  ExtendedPermissionValues.OFFLINE_ACCESS, ExtendedPermissionValues.RSVP_EVENT,
									  ExtendedPermissionValues.SMS, ExtendedPermissionValues.USER_STATUS
					];
				permsCB.dataProvider = permsDP;
				
				friendsList.labelFunction = formatFriendsLabel;
				
				loader = new URLLoader( new URLRequest( RSS_URL ) );
				loader.addEventListener( Event.COMPLETE, onLoadComplete, false, 0, true );*/
			}
			
			private function updateStatus( status:String ):void
			{
				if( status == StatusType.CONNECTED )
				{
					currentState = "LoggedIn";
					
					//getFriends();
					api();
				}
				else
				{
					currentState = "LoggedOut";
				}
			}
			
			private function getLoginStatus():void
			{
				var call:GetLoginStatus = new GetLoginStatus( true );
				call.addEventListener( FacebookEvent.COMPLETE, onGetLoginStatusComplete );
				facebook.post( call );
			}
			
			private function login():void
			{
				var call:Login = new Login();
				call.addEventListener( FacebookEvent.COMPLETE, onLoginComplete );
				facebook.post( call );
			}
			
			private function logout():void
			{
				var call:Logout = new Logout();
				call.addEventListener( FacebookEvent.COMPLETE, onLogoutComplete );
				facebook.post( call );
			}
			
			private function api():void
			{
				var call:GetInfo = new GetInfo( [ sessionResponseData.session.uid ], GetInfoFieldValues.ALL_VALUES );
				call.addEventListener( FacebookEvent.COMPLETE, onAPIComplete );
				facebook.post( call );
				
				/*var call:API = new API();
				call.path = "/me";
				call.addEventListener( FacebookEvent.COMPLETE, onAPIComplete );
				facebook.post( call );*/
			}
			
			private function ui():void
			{
				/*var call:UI = new UI();
				call.params = { method: 'stream.publish', message: 'Test' };
				call.addEventListener( FacebookEvent.COMPLETE, onUIComplete );
				facebook.post( call );*/
				
				var call:StreamPublish = new StreamPublish();
				call.message = "Test";
				call.addEventListener( FacebookEvent.COMPLETE, onUIComplete );
				facebook.post( call );
			}
			
			private function getFriends():void
			{
				var call:GetFriends = new GetFriends();
				call.addEventListener( FacebookEvent.COMPLETE, onGetFriendsComplete );
				facebook.post( call );
			}
			
			private function onGetLoginStatusComplete( event:FacebookEvent ):void
			{
				if( event.success )
				{
					sessionResponseData = event.data as GetLoginStatusData;
					
					updateStatus( sessionResponseData.status );
				}
				else
				{
					currentState = "LoggedOut";
				}
			}
			
			private function onLoginComplete( event:FacebookEvent ):void
			{
				if( event.success )
				{
					sessionResponseData = event.data as LoginData;
					
					updateStatus( sessionResponseData.status );
				}
			}
			
			private function onLogoutComplete( event:FacebookEvent ):void
			{
				if( event.success )
				{
					sessionResponseData = event.data as LogoutData;
					
					updateStatus( sessionResponseData.status );
				}
			}
			
			private function onAPIComplete( event:FacebookEvent ):void
			{
				if( event.success )
				{
				}
			}
			
			private function onUIComplete( event:FacebookEvent ):void
			{
				if( event.success )
				{
				}
			}
			
			private function onLoginClick( event:MouseEvent ):void
			{
				login();
			}
			
			private function onLogoutClick( event:MouseEvent ):void
			{
				logout();
			}
			
			private function onUIClick( event:MouseEvent ):void
			{
				ui();
			}
			
			protected function onLoadComplete( event:Event ):void
			{
				if( loader.data == null )
				{
					rssList.dataProvider = [];
					Alert.show( 'Error loading RSS feed.' );
					return;
				}
				
				var xml:XML = XML( loader.data );
				var results:XMLList = xml..item;
				
				if( results.length() == 0 )
				{
					rssList.dataProvider = [];
					return;
				}
				rssList.dataProvider = results;
			}
			
			protected function onGetFriendsComplete( event:FacebookEvent ):void
			{
				/**
				   If we get a success of true back the call was completed sucesfully.
				   Now we make a second call to get more detailed information for each friends.
				 * We limit to the top 100 for speed reasons, if you wish you can request all of your friends details.
				 */
				if( event.success )
				{
					var friends:Array = ( event.data as GetFriendsData ).friends.source;
					
					var uids:Array = [];
					
					for( var i:uint = 0; i < friends.length; i++ )
					{
						uids.push( friends[ i ].uid );
					}
					var call:GetInfo = new GetInfo( uids.slice( 0, Math.min( uids.length, 100 ) ), [ GetInfoFieldValues.FIRST_NAME, GetInfoFieldValues.LAST_NAME ] );
					call.addEventListener( FacebookEvent.COMPLETE, onFriendsGetInfo );
					facebook.post( call );
				}
				else
				{
					//An error happened so display an message to the user.
					Alert.show( 'Error loading friends.', 'Error' );
				}
			}
			
			protected function onFriendsGetInfo( event:FacebookEvent ):void
			{
				event.target.removeEventListener( FacebookEvent.COMPLETE, onFriendsGetInfo );
				
				if( event.success )
				{
					var dp:Array = ( event.data as GetInfoData ).userCollection.source;
					friendsList.dataProvider = dp;
					
					//Just select a random friend in the list to send a link to.
					var idx:Number = Math.random() * dp.length >> 0;
					friendsList.selectedIndex = idx;
					callLater( friendsList.scrollToIndex, [ idx ] );
				}
				else
				{
					Alert.show( 'There was an error loading your friends details.', 'Error' );
				}
			}
			
			protected function formatFriendsLabel( user:Object, ... rest ):String
			{
				return user.first_name + ', ' + user.last_name;
			}
			
			protected function shareLink( event:Event ):void
			{
				//connect.callMethod( 'showShareDialog', rssList.selectedItem.link );
			}
			
			protected function postToFacebook( event:Event ):void
			{
				var templateData:Object = {};
				templateData.postTitle = rssList.selectedItem.title;
				
				var url:String = rssList.selectedItem.link;
				templateData.pageUrl = '<a href="' + url + '">' + url + '</a>';
				
				/**
				 * showFeedDialog: Name of the connect method to call.
				 * 76726577109: Feed template id that has been created on Facebook
				 * tData: Object variables that Facebook will replace the template values with.
				 * friendsList.selectedItem.uid: The uid of the person your sharing a link with.
				 *
				 */
				//connect.callMethod( 'showFeedDialog', '76726577109', templateData, [ friendsList.selectedItem.uid ] );
			}
			
			protected function showPermissionDialog():void
			{
				//connect.callMethod( 'showPermissionDialog', permsCB.selectedLabel );
			}
		]]>
	</mx:Script>
	<mx:states>
		<mx:State name="LoggedOut">
			<mx:RemoveChild target="{resultsList}"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:RemoveChild target="{logoutButton}"/>
			<mx:RemoveChild target="{uiButton}"/>
		</mx:State>
		<mx:State name="LoggedIn">
			<mx:RemoveChild target="{loginButton}"/>
		</mx:State>
		<mx:State name="Loading">
			<mx:RemoveChild target="{loginButton}"/>
			<mx:RemoveChild target="{uiButton}"/>
			<mx:RemoveChild target="{text1}"/>
			<mx:RemoveChild target="{permsCB}"/>
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{spacer1}"/>
			<mx:RemoveChild target="{resultsList}"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:RemoveChild target="{logoutButton}"/>
		</mx:State>
	</mx:states>

	<mx:Button id="loginButton" label="Login" click="onLoginClick( event )" />
	<mx:Button id="logoutButton" label="Logout" click="onLogoutClick( event )" />
	<mx:Button id="uiButton" label="Show UI" click="onUIClick( event )"/>
	<mx:HBox width = "{resultsList.width}" id="hbox1">
		<mx:HBox width = "100%"
				 paddingBottom = "5"
				 paddingLeft = "5"
				 paddingRight = "5"
				 paddingTop = "5"
				 borderColor = "0x0"
				 borderThickness = "1"
				 borderStyle = "solid">
			<mx:Text width = "325"
					 selectable = "false"
					 text = "Using Facebook Connect you can enable extended permissions for the logged in user. Select a permission value from the list and click showPermissionDialog()"  id="text1"/>
			<mx:ComboBox id = "permsCB" />
			<mx:Button label = "showPermissionDialog()"
					   click = "showPermissionDialog()"  id="button1"/>
			<mx:Spacer width = "100%"  id="spacer1"/>
		</mx:HBox>
	</mx:HBox>
	<mx:HBox id = "resultsList">
		<mx:VBox height = "100%">
			<mx:Text text = "Select a friend.  Then click 'Post to Facebook' to post this to their Facebook page."
					 selectable = "false"
					 width = "200" />
			<mx:List id = "friendsList"
					 allowMultipleSelection = "false"
					 width = "200"
					 height = "100%" />
		</mx:VBox>
		<mx:List id = "rssList"
				 width = "450"
				 itemRenderer = "RSSRenderer"
				 labelField = "title" />
	</mx:HBox>

</mx:Application>
